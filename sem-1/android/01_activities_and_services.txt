1. Activities and Services


    1.1 Overview of Mobile Technologies, Mobile Platform Features, Architecture, Versions, and Development Tools

        -> Overview of Mobile Technologies

            Mobile technology ek rapidly growing field hai jisme smartphone, tablet, wearables aur IoT devices included hote hain.
            Ye technologies mainly wireless communication (4G/5G, Wi-Fi, Bluetooth, NFC) aur mobile applications ke around hoti hain.

            Real-life example:
                - Ola/Uber app GPS + Mobile Internet + Payment Gateway ka use karti hai.
                - WhatsApp: instant messaging via internet.

        -> Mobile Platform Features

            Har mobile OS (Android, iOS, Windows, etc.) kuch features provide karta hai:

                (1) Touchscreen Interface – Gesture support (tap, swipe, pinch).
                    Example: Google Maps me pinch karke zoom karna.

                (2) App Store/Play Store – Application distribution platform.
                    Example: Play Store se Zomato download karna.

                (3) Connectivity – 4G/5G, Wi-Fi, Bluetooth, NFC.

                (4) Security – Sandboxing, permissions, biometric authentication.

                (5) Cloud Integration – Google Drive, iCloud, OneDrive.

            Syntax (Android - Permission Example):
                <uses-permission android:name="android.permission.INTERNET"/>

        -> Mobile Architecture

            Mobile architecture define karti hai ki applications aur system resources kaise interact karte hain.
            Mostly layered architecture hoti hai:

            Android Architecture (Example):
                Applications Layer – User apps (WhatsApp, Instagram).
                Application Framework – Activity Manager, Window Manager.
                Libraries & Runtime – SQLite, WebKit, ART/Dalvik VM.
                Linux Kernel – Hardware drivers, power management.

            Real-life Example:
                Jab tum YouTube open karte ho → Application layer request karta hai → Framework manage karta hai → Libraries video decoding handle karti hain → Kernel hardware resources (CPU/GPU) allocate karta hai.

        -> Versions of Mobile Platforms

            Mobile OS har kuch saal me naye versions release karte hain jisme features + security + performance improvements hoti hain.

            Android Versions Example:
                Android 5.0 (Lollipop) – Material Design introduced.
                Android 6.0 (Marshmallow) – App permissions model.
                Android 10 – Dark mode.
                Android 14/15 – Better privacy, AI features.

            iOS Versions Example:
                iOS 10 – Siri integration.
                iOS 13 – Dark mode.
                iOS 17 – StandBy mode, improved widgets.

            Syntax (Check device version in Android):
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                    Toast.makeText(this, "Running on Android 10 or above", Toast.LENGTH_SHORT).show();
                }

        -> Development Tools

            Mobile app banane ke liye developers ko alag-alag tools milte hain:

            Android:
                - Android Studio – Official IDE.
                - Languages – Java, Kotlin.
                - Emulator – Device testing.

            Syntax:
                import android.os.Bundle
                import androidx.appcompat.app.AppCompatActivity

                class MainActivity : AppCompatActivity() {
                    override fun onCreate(savedInstanceState: Bundle?) {
                        super.onCreate(savedInstanceState)
                        setContentView(R.layout.activity_main)
                    }
                }

            iOS:
                - Xcode – IDE for iOS apps.
                - Languages – Swift, Objective-C.

            Swift Example (Hello World):
                import UIKit

                class ViewController: UIViewController {
                    override func viewDidLoad() {
                        super.viewDidLoad()
                        print("Hello iOS World!")
                    }
                }

            Cross-Platform:
                - React Native (JavaScript).
                - Flutter (Dart).
                - Xamarin (.NET, C#).

            Flutter Example (Hello World):
                import 'package:flutter/material.dart';

                void main() => runApp(MaterialApp(home: Text('Hello Flutter')));

        -> Conclusion

            Mobile technologies ne aaj ke time me lifestyle aur businesses dono change kar diye hain. Har platform ki apni features, architecture, versions aur tools hote hain jo development aur user experience ko define karte hain.


    1.2 Activity: Life Cycle, Intent: Communication with Multiple Screen and Built-In Application

        -> Activity in Android

            Definition:
                Activity ek single screen with UI hoti hai Android app ke andar.
                Har app ke andar multiple activities ho sakti hain (e.g., LoginActivity, DashboardActivity).

            Real-life Example:
                WhatsApp → Chat Screen ek activity hai, Status ek alag activity hai, Calls ek alag activity hai.

        -> Activity Life Cycle

            Activity ke 6 main callback methods hote hain jo system automatically call karta hai.
            Phases of Activity:

                (1) onCreate() → Activity create hoti hai (UI load hota hai).
                        override fun onCreate(savedInstanceState: Bundle?) {
                            super.onCreate(savedInstanceState)
                            setContentView(R.layout.activity_main)
                        }
    
                    Example: Jab app pehli baar open hota hai → UI load hota hai.

                (2) onStart() → Activity screen par visible hoti hai, lekin abhi user input (click, typing) lene ke liye fully ready nahi hoti.
                    Socho app khulta hai aur tumhe screen dikhne lagti hai, but abhi interactive nahi.

                (3) onResume() → Activity visible aur interactive ho jati hai (user ke touch/inputs ka response milta hai).
                    Example: Jab tum YouTube open karke video play karte ho.

                (4) onPause() → Activity abhi bhi partially visible hoti hai, lekin foreground me koi dusra app/dialog aagaya hai.
                    Example: YouTube pe video chal raha hai aur tumne ek notification tap kiya → video ruk jata hai, par screen ka thoda part abhi bhi dikhta hai.

                (5) onStop() → Activity screen se remove hoti hai (background me chali jati hai).
                    Example: Tumne Home button dabaya → app background me chala gaya.

                (6) onDestroy() → Activity destroy ho jati hai (close ho jati hai).
                    Example: Tum app ko close kar dete ho (recent apps se hata dete ho).

                Real-life Example Flow:
                    WhatsApp → Chat screen open (onCreate → onStart → onResume).
                    Back button dabao → (onPause → onStop → onDestroy).

        -> Intent in Android

            Definition:

                Intent ek messaging object hai jo ek activity se dusri activity ya built-in app ke saath communication karta hai.

            Types of Intent:

                1. Explicit Intent → App ke andar hi ek activity se dusri activity call karne ke liye.
                Example: LoginActivity → DashboardActivity.  
                    Intent i = new Intent(MainActivity.this, SecondActivity.class);
                    startActivity(i);

                2. Implicit Intent → Built-in apps ko call karne ke liye (dialer, camera, gallery, browser).
                Example: Dialer open karna.
                    Intent callIntent = new Intent(Intent.ACTION_DIAL);
                    callIntent.setData(Uri.parse("tel:9876543210"));
                    startActivity(callIntent);

        -> Communication with Multiple Screens

            Jab ek activity se dusri activity pe data bhejna ho to Intent + putExtra() + getExtra() ka use hota hai.

            Example (Pass Data from Activity A → Activity B):
                // Activity A
                Intent i = new Intent(MainActivity.this, SecondActivity.class);
                i.putExtra("username", "Bunty");
                startActivity(i);

                // Activity B
                String name = getIntent().getStringExtra("username");
                Toast.makeText(this, "Hello " + name, Toast.LENGTH_SHORT).show();

            Real-life Example:
                Login screen se username ko dashboard me show karna.

        -> Communication with Built-in Applications

            Camera open karna:
                Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                startActivity(cameraIntent);

            Browser open karna:
                Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.google.com"));
                startActivity(browserIntent);

            Gallery open karna:
                Intent galleryIntent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                startActivity(galleryIntent);

            Real-life Example:
                - Facebook → Profile picture update → Gallery ya Camera open hota hai.
                - Zomato → Call restaurant → Dialer open hota hai.

        -> Conclusion

            - Activity Life Cycle samajhna zaroori hai kyunki ye define karta hai ki app ka behavior har state me kaisa hoga.
            - Intent ek strong communication mechanism hai jo multiple screens + built-in apps ko easily connect karta hai.


    1.3 Fragment: Introduction, Need, Life Cycle, Creation and Interfragment Communication

        -> Introduction of Fragment

            Definition:
                Fragment ek modular section of Activity hota hai jiska apna layout, life cycle aur behavior hota hai.
                Fragment ko tum ek sub-activity ya reusable UI component samajh sakte ho.

            Real-life Example:
                WhatsApp: Ek hi screen me Chat, Status, Calls tabs alag-alag fragments hote hain.
                Flipkart: Product detail screen → ek fragment me images, dusre fragment me description.

        -> Need of Fragment

            Fragments kyun use hote hain?
                (1) Reusability – Ek UI component multiple activities me use ho sakta hai.
                (2) Adaptive UI – Tablet aur mobile dono ke liye same code se responsive UI design karna.
                (3) Multiple UI panels – Single activity ke andar tabs/pages manage karna.
                (4) Dynamic UI change – Run-time pe fragment add/remove kar sakte ho.

            Example:
                - Tablet me ek hi screen pe master list + detail dono dikhana (Fragments ke sath).
                - Mobile me sirf ek list show karna.

        -> Fragment Life Cycle

            Fragment ka apna life cycle hota hai jo activity ke sath interact karta hai.
            Important Methods:

                (1) onAttach() – Fragment activity se attach hota hai.
                (2) onCreate() – Fragment create hota hai (non-UI logic).
                (3) onCreateView() – Layout inflate hota hai (UI design).
                    override fun onCreateView(
                        inflater: LayoutInflater,
                        container: ViewGroup?,
                        savedInstanceState: Bundle?
                    ): View? {
                        return inflater.inflate(R.layout.fragment_one, container, false)
                    }
                (4) onActivityCreated() – Activity aur fragment dono initialized.
                (5) onStart() – Fragment visible hota hai.
                (6) onResume() – Fragment user ke liye interactive hota hai.
                (7) onPause() – Fragment partially visible.
                (8) onStop() – Fragment invisible ho jata hai.
                (9) onDestroyView() – Fragment ka UI destroy hota hai.
                (10) onDetach() – Fragment activity se detach ho jata hai.

            Real-life Example Flow:
                WhatsApp → Chats tab open hota hai → onCreateView() call hota hai.
                Tab switch karte hi fragment invisible ho jata hai (onPause → onStop).

        -> Fragment Creation

            Fragment banane ke do tarike hain:
                (a) Static Fragment (XML ke through)

                    <fragment
                    android:id="@+id/fragment1"
                    android:name="com.example.FragmentOne"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"/>

                (b) Dynamic Fragment

                        val fm = supportFragmentManager
                        val ft = fm.beginTransaction()
                        ft.add(R.id.fragment_container, FragmentOne())
                        ft.commit()

        -> Inter-fragment Communication
            Fragments directly ek dusre ke sath interact nahi karte, balki Activity ke through communicate karte hain.

            Method 1: Using Activity
                Example – FragmentOne → Data send → Activity → Activity forward → FragmentTwo.

                // FragmentOne.java
                Intent i = new Intent(getActivity(), SecondActivity.class);
                i.putExtra("msg", "Hello from FragmentOne");
                startActivity(i);

                // FragmentTwo.java (inside SecondActivity)
                String data = getActivity().getIntent().getStringExtra("msg");
                Toast.makeText(getActivity(), data, Toast.LENGTH_SHORT).show();

            Method 2: Using Interface (Recommended)

                (1) Define Interface in FragmentOne

                    public interface FragmentListener {
                        void onInputSent(String input);
                    }

                (2) Implement in Activity

                    public class MainActivity extends AppCompatActivity implements FragmentOne.FragmentListener {
                        @Override
                        public void onInputSent(String input) {
                            FragmentTwo f2 = (FragmentTwo) getSupportFragmentManager().findFragmentById(R.id.fragment2);
                            f2.updateText(input);
                        }
                    }

                (3) Update FragmentTwo

                    public void updateText(String input) {
                        textView.setText(input);
                    }

                Real-life Example:
                    Login Fragment → username input → Activity → forward data → Profile Fragment display username.

        -> Conclusion

            - Fragment ek modular UI component hai jo Activity ke andar hota hai.
            - Ye reusability, adaptive UI aur inter-fragment communication ke liye important hai.
            -Har Fragment ka apna life cycle hota hai jo Activity se linked hota hai.


    1.4 User Interface Containers and Screen Elements

        -> Introduction
            Android me User Interface (UI) ek combination hota hai containers (jo dusre elements hold karte hain) aur screen elements (jo directly user se interact karte hain).
            - Containers → Layouts (LinearLayout, RelativeLayout, ConstraintLayout, etc.)
            - Screen Elements → Views/Widgets (Button, TextView, EditText, ImageView, etc.)

            Real-life Example:
                WhatsApp → Chat screen → Container = LinearLayout, Screen Elements = TextView (name), EditText (message box), Button (send).

        -> UI Containers (Layouts in Android)
            Containers basically parent views hote hain jo child views ko arrange karte hain.

            (a) LinearLayout
                Arrange child views horizontally ya vertically.
                Example: Form filling screen (Name, Email, Password fields ek ke neeche ek).

                Syntax:
                    <LinearLayout
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:orientation="vertical">
                        
                        <TextView android:text="Enter Name"/>
                        <EditText android:hint="Name"/>
                    </LinearLayout>

            (b) RelativeLayout
                Views ko ek dusre ke relation me arrange karta hai.
                Example: Profile picture left side aur name uske right me.

                Syntax:
                    <RelativeLayout
                        android:layout_width="match_parent"
                        android:layout_height="match_parent">

                        <ImageView
                            android:id="@+id/profile"
                            android:layout_width="100dp"
                            android:layout_height="100dp"/>

                        <TextView
                            android:layout_toRightOf="@id/profile"
                            android:text="Bunty"/>
                    </RelativeLayout>

            (c) ConstraintLayout
                Most flexible layout, complex UIs ke liye use hoti hai.
                Example: Instagram post screen (image, likes, comments aligned properly).

                Syntax:
                    <androidx.constraintlayout.widget.ConstraintLayout
                        android:layout_width="match_parent"
                        android:layout_height="match_parent">

                        <Button
                            android:id="@+id/btn"
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            app:layout_constraintTop_toTopOf="parent"
                            app:layout_constraintStart_toStartOf="parent"/>
                    </androidx.constraintlayout.widget.ConstraintLayout>

            (d) FrameLayout
                Ek single block jisme ek view hota hai (ya overlap kar sakte ho).
                Example: Video player me ek hi container jisme video dikh raha hai.

                Syntax:
                    <FrameLayout
                        android:layout_width="match_parent"
                        android:layout_height="match_parent">
                        <ImageView android:src="@drawable/pic"/>
                    </FrameLayout>

            (e) ScrollView
                Agar content screen se bada ho to scroll karne ke liye use hoti hai.
                Example: Long terms & conditions page.

                Syntax:
                    <ScrollView
                        android:layout_width="match_parent"
                        android:layout_height="match_parent">
                        <TextView android:text="This is a long text..."/>
                    </ScrollView>

        -> Screen Elements (Widgets in Android)
            Screen elements wo views hote hain jo user se interact karte hain.

            (a) TextView
                Static text dikhata hai.

                Example: "Welcome Bunty" message.
                    <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Hello Bunty"/>

            (b) EditText
                User input lene ke liye.

                Example: Login form me username/password field.
                    <EditText
                    android:hint="Enter Username"
                    android:inputType="text"/>

            (c) Button
                Action perform karne ke liye.

                <Button
                android:text="Login"
                android:onClick="loginMethod"/>

            (d) ImageView
                Image dikhane ke liye.

                Example: Profile picture.
                    <ImageView
                    android:src="@drawable/profile_pic"
                    android:layout_width="100dp"
                    android:layout_height="100dp"/>

            (e) CheckBox & RadioButton
                - CheckBox: Multiple selection. (e.g., Hobbies select karna)
                - RadioButton: Single selection. (e.g., Gender choose karna)

                <CheckBox android:text="Reading"/>
                <RadioButton android:text="Male"/>

            (f) Spinner
                Dropdown list.

                Example: City selection in form.
                    <Spinner
                    android:id="@+id/spinner"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"/>

            (g) ProgressBar
                Task progress dikhane ke liye.

                Example: File download ho raha hai.
                    <ProgressBar
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    style="?android:attr/progressBarStyleLarge"/>

        -> Real-Life Example UI

            WhatsApp Chat Screen:
                - Container: LinearLayout (Vertical orientation).
                - Screen Elements:
                    TextView → Name, Message.
                    ImageView → Profile picture.
                    EditText → Type a message.
                    Button → Send.

        -> Conclusion
            
            - Containers (Layouts) define karte hain ki UI elements kaise arrange honge.
            - Screen Elements (Widgets) directly user ke sath interact karte hain.
            - In dono ka sahi combination ek interactive aur responsive mobile application banata hai.


    1.5 Dialogs: Introduction, Need, Types

        -> Introduction of Dialogs
            Definition:
                Dialog ek small popup window hota hai jo current activity ke upar appear hota hai aur user ko information dikhata hai ya koi action perform karne ke liye prompt karta hai.
                Dialog ke peeche wali activity partially visible hoti hai aur background inactive ban jata hai.

            Real-life Example:
                - WhatsApp me jab "Delete Chat?" aata hai → ye ek dialog hai.
                - Google Play Store me jab app install karte ho aur "Allow Permission?" aata hai → dialog use hota hai.

        -> Need of Dialogs

            Dialogs kyu use karte hain?
                (1) User Confirmation – e.g., Exit karne pe "Are you sure?" dialog.
                (2) Quick Information – e.g., "File Downloaded Successfully" message.
                (3) User Input – e.g., Login form ke liye popup dialog.
                (4) Selection from List – e.g., Ringtone select karna.
                (5) System Alert / Warning – e.g., Low Battery notification.

            Dialog ka main purpose hai user ko bina activity change kiye prompt karna.

        -> Types of Dialogs

            Android me mainly 4 types ke dialogs use hote hain:
                (a) AlertDialog
                    Most common dialog jo message show + 1/2/3 buttons hota hai (Yes/No/Cancel).
                    Example: App close karte time confirmation.

                    Syntax:
                        AlertDialog.Builder builder = new AlertDialog.Builder(this);
                        builder.setTitle("Exit");
                        builder.setMessage("Are you sure you want to exit?");
                        builder.setPositiveButton("Yes", (dialog, which) -> finish());
                        builder.setNegativeButton("No", null);
                        builder.show();

                (b) ProgressDialog
                    Long running task (download, upload, etc.) dikhane ke liye.
                    Example: File downloading dialog.

                    Syntax:
                        ProgressDialog progress = new ProgressDialog(this);
                        progress.setMessage("Downloading...");
                        progress.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
                        progress.setIndeterminate(true);
                        progress.show();

                (c) DatePickerDialog & TimePickerDialog
                    - DatePickerDialog: Date choose karne ke liye.
                    - TimePickerDialog: Time set karne ke liye.
                    Example: Ticket booking app me travel date choose karna.

                    DatePicker Syntax:
                        DatePickerDialog dpd = new DatePickerDialog(this,
                            (view, year, month, day) -> {
                                Toast.makeText(this, day + "/" + (month+1) + "/" + year, Toast.LENGTH_SHORT).show();
                            }, 2025, 8, 15);
                        dpd.show();

                    TimePicker Syntax:
                        TimePickerDialog tpd = new TimePickerDialog(this,
                            (view, hour, minute) -> {
                                Toast.makeText(this, hour + ":" + minute, Toast.LENGTH_SHORT).show();
                            }, 12, 0, true);
                        tpd.show();

                (d) Custom Dialog
                    - Developer apna layout XML design karke dialog ke andar use karta hai.
                    Example: Login dialog (username + password fields inside popup).

                    Syntax:
                        Dialog dialog = new Dialog(this);
                        dialog.setContentView(R.layout.custom_dialog);
                        dialog.setTitle("Login");
                        dialog.show();

        -> Real-life Examples of Dialogs
            - AlertDialog: "Delete this message?" in WhatsApp.
            - ProgressDialog: "Uploading 50%" while sending a file.
            - DatePickerDialog: Choose DOB in registration form.
            - Custom Dialog: Enter OTP popup.

        -> Conclusion

            Dialogs ek important UI component hai jo quick interaction, confirmation aur input ke liye use hote hain.
            Android me AlertDialog, ProgressDialog, DatePicker/TimePickerDialog aur CustomDialog commonly use hote hain.


    1.6 Service: Overview, Life Cycle, Types

        -> Overview of Service
            Definition:
                Service ek application component hai jo background me long-running operations perform karta hai bina user interface (UI) ke.
                Activity foreground me hoti hai, jabki Service background me kaam karti rehti hai.

            Real-life Example:
            - WhatsApp: Background service messages receive karti rehti hai even jab app band ho.
            - Spotify: Music service background me play hoti hai jab tum dusra app use kar rahe ho.
            - Google Maps: Location tracking service chalti rehti hai.

        -> Service Life Cycle
            Service ka apna life cycle methods hote hain (Activity ke jaise but simpler).

            Important Callbacks:
                (1) onCreate()
                    Jab service first time create hoti hai.

                    @Override
                    public void onCreate() {
                        super.onCreate();
                        Log.d("ServiceDemo", "Service Created");
                    }

                (2) onStartCommand()
                    Jab service start hoti hai (main kaam yaha likhte hain).

                    @Override
                    public int onStartCommand(Intent intent, int flags, int startId) {
                        Log.d("ServiceDemo", "Service Started");
                        return START_STICKY;
                    }

                (3) onBind()
                    Jab service ko activity ke sath bind karna ho. (rare, specially bound services ke liye).

                (4) onDestroy()
                    Jab service stop ho jati hai.

                    @Override
                    public void onDestroy() {
                        super.onDestroy();
                        Log.d("ServiceDemo", "Service Destroyed");
                    }

            Real-life Example Flow:
                Spotify open karke song play karo → Service start hogi (onStartCommand).
                App band kar do → Song phir bhi play hoga (service background me).
                Stop button dabao → Service stop hogi (onDestroy).

        -> Types of Services

            (a) Foreground Service
                - Definition: Service jo actively run hoti hai aur notification bar me visible hoti hai.
                - Use case: Music player, fitness tracking app.
                - Example: Spotify ka music play notification.

                Syntax:
                    startForegroundService(new Intent(this, MusicService.class));

            (b) Background Service
                - Definition: Service jo background me bina notification ke run hoti hai.
                - Use case: Syncing data, sending logs.
                - Note: Latest Android versions me background service restrictions zyada hain.
                - Example: WhatsApp ka auto backup.

                Syntax:
                    startService(new Intent(this, SyncService.class));

            (c) Bound Service
                - Definition: Service jisme ek component (Activity/Fragment) directly connect karke interact kar sakta hai.
                - Use case: Music player controls → Activity se service ko directly control karna.
                - Example: Activity → Service se "pause, play, stop" commands bhejna.

                Syntax:
                    @Override
                    public IBinder onBind(Intent intent) {
                        return new LocalBinder();
                    }

        -> Real-life Examples

            - Foreground Service: Spotify playing songs with notification.
            - Background Service: WhatsApp message receiving.
            - Bound Service: Media player app where activity controls music service.

        -> Conclusion

            - Service ek important Android component hai jo background tasks handle karta hai.
            - Service ke life cycle methods (onCreate, onStartCommand, onDestroy) ko samajhna important hai.
            - Types of Service: Foreground, Background, Bound – har ek ka apna use case hai.

