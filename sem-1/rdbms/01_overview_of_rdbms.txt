1. Database Management System

    Definition:
        Database Management System (DBMS) ek software hai jo data ko store, manage aur retrieve karne ke liye use hota hai. Ye ek tarah ka bridge hai user aur database ke beech.

    Matlab DBMS help karta hai data ko systematically organize karne me, taki data redundancy (same data baar-baar hona) aur inconsistency kam ho.


    1.1 Purpose of Database Systems

        Data Management – Data ko systematic aur secure tarike se manage karna.
        Reduce Redundancy – Ek hi data multiple jagah na ho, balki centralized ho.
        Data Consistency – Har jagah data same ho (agar ek place update ho to dusri jagah bhi reflect ho).
        Data Security – Authorized users hi data access/edit kar sakein.
        Data Sharing – Multiple users ek hi database ko ek time par access kar sakte hain.
        Backup & Recovery – Agar data loss ho jaye to DBMS backup se restore kar sake.
        Data Independence – Program ko data storage ki internal details nahi chahiye hoti, bas DBMS handle karta hai.

        -> Real Life Example:

            Banking System
                Imagine karo tumhara bank account hai. Agar tum paise withdraw karte ho ATM se, aur usi time kisi aur branch me deposit hota hai, to DBMS ensure karta hai ki dono transactions properly update ho aur tumhare balance me koi error na ho.

            Online Shopping (Amazon/Flipkart)
                Jab tum Amazon pe order place karte ho, DBMS kaam karta hai:

                Product ka stock update karna
                Payment record store karna
                Delivery address manage karna
                Seller aur buyer dono ko information provide karna

            Without DBMS, ye sab manually handle karna mushkil hota aur errors zyada hote.
    

    1.2 View of Data: Data Abstraction, Instances and Schemas

        View of Data
            DBMS me user directly raw data ke saath deal nahi karta. User ko sirf relevant aur simplified view dikhaya jata hai.
            Ye concept Data Abstraction kehlata hai.

        Data Abstraction (Levels of Data)
            Data abstraction ka matlab hai unnecessary details ko hide karke sirf required information show karna.

            DBMS me 3 levels of abstraction hote hain:

                (1) Physical Level (Lowest level)
                    Data actually disk pe kaise store hai (binary, index, pointers etc.).
                    User ko ye nahi dikhaya jata.

                    Example: Roll number "101" hard disk me block ke kis sector me rakha hai.

                (2) Logical Level (Middle level)
                    Data ka structure aur relationships define karta hai.

                    Example: Student table me fields hai – Roll No, Name, Age, City.

                (3) View Level (Highest level)
                    End users ke liye simplified customized view.

                    Example: Admin ko full student data dikhega, but student ko sirf apna data dikhega.

        Instances and Schemas

            (1) Schema (Structure / Design of DB)
                Database ka blueprint ya design.
                Ye mostly fixed hota hai.

                Example: Student table ka schema → (Roll_No, Name, Age, City).

            (2) Instance (Data in DB at a particular time)
                Database me actual stored data at that moment.

                Example:
                Schema: Student(Roll_No, Name, Age, City)
                Instance: (101, Riya, 20, Delhi), (102, Aman, 21, Mumbai)

            -> Short me:
                Schema = Design (static)
                Instance = Data inside (dynamic, frequently changes)

        Real Life Example:
            Schema: Socho tum ek school ka register banate ho jisme columns decide hote hain – Roll No, Name, Age, City. (Ye structure fix ho gaya, ye hai schema).
            Instance: Us register me jo daily students ke details likhe jate hain, wo instance hai. (Har din data badal sakta hai).
            Data Abstraction: Teacher ko sirf Name aur Marks ki list chahiye hogi, usse address aur age ka data dikhana zaruri nahi hai → unnecessary details hide kar di gayi.

        -> In short:
            Data Abstraction: Hide extra details, show only needed info.
            Schema: Design of database.
            Instance: Actual data inside database at a given time.


    1.3 Data Models: Relational Model, Entity-Relationship Model, Object-Based Data Model, Semistructured Data Model, Database Languages

        -> What is Data Model?
            Data Model ek conceptual framework hai jo batata hai ki database me data kaise store hoga, represent hoga aur relate karega.
            Simply, data model = rules + structure for data representation.

        -> Types of Data Models

            (1) Relational Model
                Data ko tables (relations) ke form me store karta hai.
                Har table = rows (tuples/records) + columns (attributes/fields).
                Use hota hai SQL databases me.

                Example:

                    Student Table:
                    Roll_No | Name  | Age | City
                    101     | Riya  | 20  | Delhi
                    102     | Aman  | 21  | Mumbai

                Real Life Example: Bank ka Customer Table (CustomerID, Name, Balance).

            (2) Entity-Relationship (E-R) Model
                Data ko entities (objects), attributes, aur relationships ke form me show karta hai.
                Mostly database design phase me use hota hai.

                Example:
                    Entity: Student (attributes: Roll_No, Name, Age)
                    Entity: Course (attributes: Course_ID, Title)
                    Relationship: Enrolled In (Student ↔ Course)

                Real Life Example: School system me Student ↔ Teacher relationship (teaches).

            (3) Object-Based Data Model
                Data ko objects ke form me represent karta hai (similar to OOP concepts).
                Object = data + methods (functions).
                Useful for multimedia, CAD, complex apps.

                Example: Employee object → data (Name, Age, Salary) + methods (calculateBonus()).

            (4) Semistructured Data Model
                Jab data fixed tabular format me nahi hota.
                Use karta hai tags or hierarchy for flexibility.
                XML, JSON common examples.

                Example:
                    {
                        "Student": {
                            "Name": "Riya",
                            "Age": 20,
                            "Skills": ["Java", "Python"]
                        }
                    }

                Real Life Example: Web applications me JSON data exchange.

        -> Database Languages

            (1) DDL (Data Definition Language):
            Database objects (tables, schema) create/alter/delete ke liye.

            Example: CREATE TABLE Student (...);

            (2) DML (Data Manipulation Language):
            Data insert, update, delete, retrieve ke liye.

            Example: INSERT INTO Student VALUES (...);

            (3) DCL (Data Control Language):
            Security aur access control ke liye.

            Example: GRANT, REVOKE

            (4) TCL (Transaction Control Language):
            Transactions manage karne ke liye.

            Example: COMMIT, ROLLBACK, SAVEPOINT

        -> In Short:
            Relational Model: Data in tables.
            E-R Model: Data as entities + relationships.
            Object-Based: Data as objects (with attributes + methods).
            Semistructured: Data in flexible format (JSON/XML).
            DB Languages:
                DDL = Structure banane ke liye
                DML = Data handle karne ke liye
                DCL = Security ke liye
                TCL = Transactions ke liye

    1.4 Database Architecture

        -> What is Database Architecture?
            Database Architecture ka matlab hai ki DBMS system ka structure kaisa hota hai aur data ko user aur database ke beech kaise flow karaya jata hai.
            Ye mainly batata hai ki users, applications aur database ek dusre se kaise interact karte hain.

        -> Types of Database Architecture

            (1) 1-Tier Architecture
                User directly database ke saath interact karta hai.
                DBMS aur user dono same system par hote hain.
                Example: Local system me MySQL install karke direct queries chalana.
                Use Case: Testing, learning, small personal projects.

            (2) 2-Tier Architecture (Client–Server)
                User application (client) ke through database (server) se interact karta hai.
                Client request bhejta hai → Server process karta hai → Response bhejta hai.
                Example: Java Application ↔ MySQL Server.
                Real Life Example: Banking system jahan desktop application direct database server se connected hota hai.

            (3) 3-Tier Architecture (Most Common)
                Teen layers hote hain:
                    Presentation Layer (Client/UI): User interface – jahan user interact karta hai (browser, app).
                    Application Layer (Business Logic/Server): Rules, calculations, security handle karta hai.
                    Database Layer: Actual data store hota hai.

                Example:
                    User Flipkart app kholta hai (UI)
                    Order place karta hai (Business Logic handle karta hai)
                    Database me order details save hote hain (Database Layer).

                Real Life Example: Web applications (Amazon, Netflix, Zomato).

        -> Diagram (Text Format)

            3-Tier Architecture Flow:
                [ User/Client (UI) ]
                        ↓
                [ Application Server (Logic) ]
                        ↓
                [ Database Server (DB) ]

        -> In Short (Hinglish me):
            1-Tier: Direct database access (no middle layer).
            2-Tier: Client ↔ Database server (via application).
            3-Tier: Client ↔ Application server ↔ Database (most secure & scalable).

    1.5 Database Users and Administrators

        -> Database Users
            DBMS ko use karne wale log alag-alag categories me divide hote hain, based on unki requirement aur knowledge level.

            (1) Naïve Users (Casual Users / End Users)
            Simple interfaces use karte hain (forms, apps).
            Unhe queries ka knowledge nahi hota.

            Example: Bank customer jo ATM se paisa nikalta hai.

            (2) Application Programmers
            Programs likhte hain jo database ko access karte hain.
            Languages like Java, Python, PHP ke saath SQL use karte hain.

            Example: Developer jo Flipkart ke order system ka backend banata hai.

            (3) Sophisticated Users
            Directly SQL queries run karte hain.
            Inhe DBMS ki technical knowledge hoti hai.

            Example: Data Analyst jo complex queries likhkar reports banata hai.

            (4) Specialized Users
            Wo users jo special-purpose database applications banate ya use karte hain.

            Example: Scientist jo ek custom database use karta hai DNA sequencing ke liye.

        -> Database Administrators (DBA)
            DBA = Person jo database manage, control aur secure karta hai.

            Responsibilities of DBA:
                (1) Schema Definition: Database ka structure design karna.
                (2) Storage Structure: Data efficiently store karna.
                (3) Security & Authorization: Kisko access dena hai, aur kis level tak.
                (4) Backup & Recovery: Data loss hone par restore karna.
                (5) Performance Monitoring: Queries fast run ho, indexing maintain karna.
                (6) Routine Maintenance: Updates, patches, aur tuning karna.

        -> Real Life Example:

            Users Example:
                Naïve User → Tum Flipkart se product order karte ho.
                Sophisticated User → Flipkart ka data analyst jo sales report nikal raha hai.
                Programmer → Developer jo tumhare order ka backend code likh raha hai.

            DBA Example:
                Flipkart ka DBA ensure karta hai ki database secure hai, backup hai, aur high traffic ke time crash na ho.

        -> In Short:
            Users = Database ko use karne wale (normal user, programmer, analyst).
            DBA = Database ka manager (security, backup, performance handle karta hai).