3. Inheritance

    3.1 Need, Use Case and Types

        -> Need of Inheritance

            Code reusability (ek baar likho, bar-bar use karo)
            Maintainability easy hota hai
            Polymorphism achieve karne me help karta hai
            Hierarchical structure banane ke liye

        -> Use Case

            example -

                Vehicle ek base class ho sakta hai, aur Car, Bike, Bus uske derived classes.
                Common properties (wheels, speed) base class me, aur specific properties (car has AC, bike has handlebar) derived class me.

        -> Types of Inheritance (Java me officially supported)

            (1) Single Inheritance – ek class dusri class se inherit kare

                example -

                    class Animal {
                        void eat() { System.out.println("Eating..."); }
                    }
                    class Dog extends Animal {
                        void bark() { System.out.println("Barking..."); }
                    }

            (2) Multilevel Inheritance – ek class se dusri, aur usse aage dusri

                example -

                    class Animal { void eat() {} }
                    class Dog extends Animal { void bark() {} }
                    class Puppy extends Dog { void weep() {} }

            (3) Hierarchical Inheritance – ek base class se multiple child classes

                example -

                    class Animal { void eat() {} }
                    class Dog extends Animal { void bark() {} }
                    class Cat extends Animal { void meow() {} }


    3.2 Base Class: Accessibility of Properties & Methods, Constructor Calling Approach

        -> Accessibility of Properties & Methods

            Agar ek class inherit ki gayi hai, to derived class base class ke public aur protected members ko access kar sakti hai.
            Private members inherit nahi hote (sirf class ke andar accessible hote hain).

            example -
            
                class Vehicle {
                    public int speed = 60;
                    private int engineNo = 1234; // accessible nahi hoga
                    protected String brand = "Honda";

                    void display() {
                        System.out.println("Speed: " + speed);
                    }
                }

        -> Constructor Calling Approach

            Jab derived class ka object banta hai, tab pehle base class ka constructor call hota hai → phir derived class ka constructor.
            Ye automatic hota hai.

            example -

                class A {
                    A() {
                        System.out.println("Base Class Constructor");
                    }
                }
                class B extends A {
                    B() {
                        System.out.println("Derived Class Constructor");
                    }
                }
                class Test {
                    public static void main(String[] args) {
                        B obj = new B();
                    }
                }

            output -
            
                Base Class Constructor
                Derived Class Constructor


    3.3 Derived Class: Accessibility of Properties & Methods, Constructor Calling Approach

        -> Accessibility in Derived Class

            Derived class apni base class ke public aur protected members ko directly use kar sakti hai.
            Private members ke liye getter/setter methods use karne padte hain.

            example -

                class Parent {
                    public int age = 50;
                    private String secret = "Hidden";
                    protected String familyName = "Bawjee";

                    void showAge() {
                        System.out.println("Age: " + age);
                    }
                }

                class Child extends Parent {
                    void display() {
                        System.out.println("Child can access age = " + age);
                        System.out.println("Child can access family name = " + familyName);
                        // secret direct access nahi kar sakta
                    }
                }

        -> Constructor Calling in Derived Class

            Agar base class me parameterized constructor hai, to derived class ke constructor me super() call karke base constructor invoke karna padta hai.

            example -

                class Parent {
                    Parent(String name) {
                        System.out.println("Parent Constructor: " + name);
                    }
                }

                class Child extends Parent {
                    Child(String name) {
                        super(name); // base class constructor call
                        System.out.println("Child Constructor: " + name);
                    }
                }

                class Test {
                    public static void main(String[] args) {
                        Child obj = new Child("Vinit");
                    }
                }

            output -

                Parent Constructor: Vinit
                Child Constructor: Vinit





